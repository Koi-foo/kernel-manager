#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
import json
import requests
from platform import release
from time import sleep
from re import findall, search
from os import path, chmod
from datetime import date
from subprocess import run, PIPE

def update_cache():
    """Обновление кэша"""
    try:
        current = date.today()
        permission = date.fromtimestamp(path.getmtime(LOCK))
        difference = (current - permission).days
    except PermissionError:
        exit(f'no access to file {LOCK}')

    if difference >= CONFIG['days']:
        shell('apt-get update')
    else: exit()

def update_packages():
    """Список пакетов для обновления"""
    packages = []
    text = 'not upgraded.'
    command = 'LANG=en apt-get dist-upgrade -sq'
    update = shell(command).splitlines()

    for item in update:
        if len(packages) == 1: break
        if text in item: packages.append(item)
    packages = findall(r'[0-9]+', packages[0])

    if not int(packages[0]) \
        and not int(packages[1]) \
        and not int(packages[2]) \
        and not int(packages[3]):
            CONFIG['pkg'] = False
    else: CONFIG['pkg'] = packages

def load_settings():
    """Загрузить настройки"""
    if not path.isfile(FILE_CONFIG):
        default_settings()

    with open(FILE_CONFIG) as  f:
        config = json.load(f)

    return config

def default_settings():
    """Восстановить настройки"""
    config = {
        'time': 600,
        'kernel': False,
        'software': False,
        'days': 1,
        'start': False,
        'service': False,
        'pkg': False,
        'version': False}

    save_settings(config)

def shell(command):
    """Запуск run вывод stdout"""
    return run(
        command,
        shell=True,
        stdout=PIPE,
        encoding='utf-8'
        ).stdout

def save_settings(content):
    """Сохранение новых настроек"""
    with open(FILE_CONFIG, 'w') as f:
        json.dump(content, f)

    chmod(FILE_CONFIG, 0o666)

def main():
    """Старт"""
    connection_test()
    update_cache()
    if CONFIG['kernel']: version_kernel()
    if CONFIG['software']: update_packages()
    save_settings(CONFIG)

def version_kernel():
    """Проверка версии ядра"""
    flavour = search(r'.*-(.+-.+)-', release()).group(1)
    current = release().split('-')[0]
    new = current.split('.')
    search_version = shell(f"apt-cache pkgnames kernel-image-{flavour}#")

    for line in search_version.splitlines():
        act = search(r':(.+)-alt' ,line).group(1).split(".")
        if int(act[0]) > int(new[0]): new[0] = act[0]
        if int(act[1]) > int(new[1]): new[1] = act[1]
        if int(act[2]) > int(new[2]): new[2] = act[2]
    new_version = ".".join(new)

    if current == new_version: CONFIG['version'] = False
    else: CONFIG['version'] = new_version

def connection_test():
    """Тест интернета"""
    try:
        requests.head('https://duckduckgo.com')
    except:
        exit('Your internet is dead :-D')

if __name__ == '__main__':
    FILE_CONFIG = '/opt/kernel-manager/data/config.json'
    LOCK = '/var/lib/apt/lists/lock'
    CONFIG = load_settings()
    main()

