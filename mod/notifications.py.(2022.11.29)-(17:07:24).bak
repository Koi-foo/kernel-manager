#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Напоминания себе.
# Полезные справки:
# Документация по dbus: https://dbus.freedesktop.org/doc/dbus-python/index.html
# Пример с qt: https://wiki.qt.io/Qt_for_Python_DBusIntegration
#
import gi
gi.require_version('Notify', '0.7')
from gi.repository import Notify, GLib
from threading import Thread
from PyQt5.QtCore import pyqtSignal, QObject
from mod.shell import Shell

class TrayNotifications(QObject):
    distUpdate = pyqtSignal()
    """Собщения уведомлений на основе dbus"""
    def __init__(self):
        super().__init__()
        self.bash = Shell()
        Notify.init('kernel_indicator.py')
        self.icon = '/opt/kernel-manager/icons/kernel-manager.png'

    def signal_button_update(self, num, signal):
        """Сигнал от кнопки обновления"""
        Thread(target=self.update_message).start()
        self.distUpdate.emit()

    def update_completed(self):
        """Сообщение завершения обновления"""
        summary = _('Update completed')
        body = _('Distribution update completed. For correct operation of all updated libraries, it is recommended to restart the computer.')

        notify = Notify.Notification.new(summary, body, self.icon)
        notify.set_timeout(30000)
        notify.set_urgency(Notify.Urgency.NORMAL)
        notify.show()
        self.message_sound()

    def update_message(self):
        """Сообщение о начале обновления"""
        summary = _('Update started')
        body = _('Software update in progress. This may take some time. When the update is complete, you will receive a notification and the taskbar icon will stop animating.')

        notify = Notify.Notification.new(summary, body, self.icon)
        notify.set_timeout(30000)
        notify.set_urgency(Notify.Urgency.NORMAL)
        notify.show()
        self.message_sound()

    def disable_button(self):
        """Сообщение отключения кнопки обновления"""
        summary = _('Button disabled')
        body = _('The Update button for new packages will no longer appear in update messages.')

        notify = Notify.Notification.new(summary, body, self.icon)
        notify.set_timeout(15000)
        notify.set_urgency(Notify.Urgency.NORMAL)
        notify.show()
        self.message_sound()

    def enable_button(self):
        """Сообщение включения кнопки обновления"""
        summary = _('Button enabled')
        body = _('Messages will now show a button to update rpm packages.')

        notify = Notify.Notification.new(summary, body, self.icon)
        notify.set_timeout(15000)
        notify.set_urgency(Notify.Urgency.NORMAL)
        notify.show()
        self.message_sound()

    def autostart_message(self, dir_autostart):
        """Показать сообщение при включении автостарта"""
        summary = _('Autostart directory:')
        body = dir_autostart

        notify = Notify.Notification.new(summary, body, self.icon)
        notify.set_timeout(10000)
        notify.set_urgency(Notify.Urgency.NORMAL)
        notify.show()
        self.message_sound()

    def kernel_message(self, config):
        """Отправить сообщение об налиции нового ядра системы"""
        summary = _('Kernel update')
        body = _('A new version of the kernel is available: ') + config['version']

        notify = Notify.Notification.new(summary, body, self.icon)
        notify.set_timeout(20000)
        notify.set_urgency(Notify.Urgency.NORMAL)
        notify.show()
        self.message_sound()

    def software_message(self, config):
        """Отправить уведомление об обновлении пакетов"""
        summary = _('Updating packages')
        button = _('Update RPM packages')

        if int(config['pkg'][0]) >= 300:
            urg = Notify.Urgency.CRITICAL
        else:
            urg = Notify.Urgency.NORMAL

        update = _('Packages to update: ') + config['pkg'][0]
        install = _('Newly installed: ') + config['pkg'][1]
        remove = _('For removing: ') + config['pkg'][2]
        not_update = _('Will not be updated: ') + config['pkg'][3]

        body = f'{update}\n{install}\n{remove}\n{not_update}'

        notify = Notify.Notification.new(summary, body, self.icon)
        notify.set_timeout(20000)
        notify.set_urgency(urg)

        self.loop = GLib.MainLoop()

        if self.bash.run('pgrep -o "apt-get dist-upgrade"'):
            pass
        elif config['upbutton']:
            notify.add_action('True', button, self.signal_button_update)

        notify.connect("closed", self.closed_loop, self.loop)
        notify.show()
        self.message_sound()
        self.loop.run()

    def closed_loop(self, sig=None, loop=None):
        """Закрыть прослушку при закрытии уведомления"""
        self.loop.quit()

    def message_sound(self):
        """Звук обычных сообщений через ALSA"""
        self.bash.run('aplay -q /opt/kernel-manager/sound/message.wav')
