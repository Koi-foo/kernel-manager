#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Python
import os
import re
import sys
import gettext
import json
from subprocess import Popen
from mod.shell import shrun
from mod.create_desktop import autostart_desktop
from mod.load_config import pathConfig, loadConfig
from pathlib import Path
from time import sleep
# PyQt
from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import QSystemTrayIcon, QMenu, QAction
from PyQt5.QtGui import QIcon
import resources
# рабочий путь
os.chdir(os.path.dirname(sys.argv[0]))
# Языковая локализация
gettext.install('kernel_manager', 'locale')

class SystemTrayWindows(QtWidgets.QMainWindow):
    """Окно настроек уведомлений на панели задач"""
    def __init__(self):
        super().__init__()
        # Сохранение настроек средством qt (тест)
        self.settings = QtCore.QSettings()
        self.default_settings()
        self.config = self.settings.value('config', type=dict)

        # Значок трея
        self.trayIcon = QSystemTrayIcon(self)
        self.trayIcon.setIcon(QIcon(":/picture/icons/kernel-manager.png"))
        self.trayIcon.setToolTip(_("Kernel update indicator"))

        # Сигналы
        self.trayIcon.activated.connect(self.open_kernel_manager)

        # Действия для меню
        iconExit = ":/picture/icons/application-exit.svg"
        quit_action = QAction(QIcon(iconExit), _("Close indicator"), self)
        quit_action.triggered.connect(exit)

        iconMessages = ':/picture/icons/dialog-messages.svg'
        show_old_message = QAction(QIcon(iconMessages), _('Repeat message'), self)
        show_old_message.triggered.connect(self.show_message)

        # Действия с проверкой состояния
        autoload = QAction(_('Set autoload'), self, checkable=True)
        autoload.triggered.connect(lambda:self.set_autoload(auto=autoload.isChecked()))

        kern_update = QAction(_('Show kernel update'), self, checkable=True)
        kern_update.triggered.connect(lambda:self.check_kernel(click=kern_update.isChecked()))

        software_update = QAction(_('Show updates'), self, checkable=True)
        software_update.triggered.connect(lambda:self.check_soft(click=software_update.isChecked()))

        # Меню
        tray_menu = QMenu()
        tray_menu.addAction(kern_update)
        tray_menu.addAction(software_update)
        tray_menu.addAction(autoload)
        tray_menu.addSeparator()
        tray_menu.addAction(show_old_message)
        tray_menu.addAction(quit_action)

        # Установка позиций
        autoload.setChecked(self.config['start'])
        kern_update.setChecked(self.config['kernel'])
        software_update.setChecked(self.config['software'])

        self.trayIcon.setContextMenu(tray_menu)
        self.trayIcon.setVisible(True)
        self.show_disabled_message()

        self.check_kernel(check=kern_update.isChecked())
        self.check_soft(check=software_update.isChecked())

    def set_autoload(self, auto=None):
        """вкл\выкл автозагрузка"""
        dir_home = Path.home()
        dir_autostart = f'{dir_home}/.config/autostart'

        if Path(dir_autostart).exists() is False:
            Path(dir_autostart).mkdir(parents=False)

        try:
            if auto:
                autostart_desktop(dir_autostart)
                self.trayIcon.showMessage(
                    _('Autostart directory:'), dir_autostart, QSystemTrayIcon.Information, 10000)
            else:
                os.remove(f'{dir_autostart}/autostart-kernel-indicator.desktop')
        except(FileNotFoundError, FileExistsError):
            pass

        self.config['start'] = auto
        self.save_settings()

    def default_settings(self):
        """Стандартные настройки"""
        self.settings.setValue('config', CONFIG)

    def save_settings(self):
        """Сохранение настроек пользователя"""
        self.settings.setValue('config', self.config)
        with open(FILE_CONFIG, 'w') as f:
            json.dump(self.config, f)

    def show_message(self):
        """Общее сообщение"""
        self.kern_show_message()
        self.soft_show_message()

    def check_kernel(self, click=None, check=None):
        """Обработка сигнала с триггера kern"""
        if click is not None:
            self.config['kernel'] = click

        if click or check:
            self.kern_show_message()

        self.save_settings()

    def check_soft(self, click=None, check=None):
        """Обработка сигнала с триггера kern"""
        if click is not None:
            self.config['software'] = click

        if click or check:
            self.soft_show_message()

        self.save_settings()

    def show_disabled_message(self):
        """Сообщение об отключении сервиса"""
        if self.config['service'] is False:
            header = _("Update service")
            body = _("The update service is disabled. Enable the service in the kernel-manager settings. Without the service enabled, the indicator will not work.")
            self.trayIcon.showMessage(header,body, QSystemTrayIcon.Warning, 60000)

    def kern_show_message(self):
        """Показать сообщения ядра"""
        if self.config['version']!= False:
            kern = self.config['version']
            header_kern = _("Kernel update")
            body_kern = _("A new version of the kernel is available: ") + kern
            self.trayIcon.showMessage(header_kern,body_kern, QSystemTrayIcon.Information, 20000)

    def soft_show_message(self):
        """Показать сообщения софта"""
        if self.config['pkg'] != False:
            header_soft = _("Software update")
            pkgUpdate = _("Packages to update: ") + self.config['pkg'][0]
            pkgInstall = _('Newly installed: ') + self.config['pkg'][1]
            pkgRemove = _('For removing: ') + self.config['pkg'][2]
            pkgNotUpdate = _('Will not be updated: ') + self.config['pkg'][3]
            body_soft = f'{pkgUpdate}\n{pkgInstall}\n{pkgRemove}\n{pkgNotUpdate}'
            self.trayIcon.showMessage(header_soft,body_soft, QSystemTrayIcon.Information, 20000)

    def open_kernel_manager(self):
        """Открыть kernel manager"""
        activ_manager = shrun("pgrep -o kernel-manager")

        if activ_manager: pass
        else: Popen("kernel-manager")

def wait_service():
    """Ждём окончания работы сервиса"""
    try:
        if sys.argv[1] == '--show':
            pass
    except:
        while True:
            if not shrun('pgrep -f "python3 /usr/bin/kernel-service"'):
                break
            sleep(CONFIG['time'])

        if not CONFIG['version'] and not CONFIG['pkg']:
            exit()

if __name__ == '__main__':
    FILE_CONFIG = pathConfig
    CONFIG = loadConfig()
    wait_service()
    app = QtWidgets.QApplication(sys.argv)
    sys_tray = SystemTrayWindows()
    sys.exit(app.exec_())
