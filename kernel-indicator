#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Python
import os
import re
import sys
import argparse
import gettext
from subprocess import Popen
from shutil import copy
from platform import release
from mod.shell import shrun
from pathlib import Path
from time import sleep
# PyQt
from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import QSystemTrayIcon, QMenu, QAction
from PyQt5.QtGui import QIcon
import resources
# рабочий путь
os.chdir(os.path.dirname(sys.argv[0]))
# Языковая локализация
gettext.install('kernel_manager', 'locale')

parser = argparse.ArgumentParser(allow_abbrev=True,
description='Kernel update indicator')
parser.add_argument('--show', action="store_true", help='show indicator')
parser.add_argument('--delay', metavar='', default=[600], type=int, nargs=1, help='time-out')
args = parser.parse_args()

class SystemTrayWindows(QtWidgets.QMainWindow):
    """Окно настроек уведомлений на панели задач"""
    def __init__(self):
        super().__init__()
        # Сохранение настроек средством qt (тест)
        # TODO: сделать тест скорости чтения из файла json и кэш ресурсов qt
        self.settings = QtCore.QSettings()
        self.show = args.show
        self.delay = args.delay[0]

        # Значок трея
        self.tray_icon = QSystemTrayIcon(self)
        self.tray_icon.setIcon(QIcon(":/picture/icons/kernel-manager.png"))
        self.tray_icon.setVisible(False)
        self.tray_icon.setToolTip(_("Kernel update indicator"))

        # Сигналы
        self.tray_icon.activated.connect(self.open_kernel_manager)

        # Действия для меню
        quit_action = QAction(
            QIcon(":/picture/icons/application-exit.svg"), _("Close indicator"), self)
        quit_action.triggered.connect(exit)

        show_old_message = QAction(
            QIcon(':/picture/icons/dialog-messages.svg'), _('Repeat message'), self)
        show_old_message.triggered.connect(self.show_message)

        # Действия с проверкой состояния
        autoload = QAction(_('Set autoload'), self, checkable=True)
        autoload.triggered.connect(
            lambda:self.set_autoload(auto=autoload.isChecked()))

        kern_update = QAction(_('Show updates'), self, checkable=True)
        kern_update.triggered.connect(
            lambda:self.check_kernel(click=kern_update.isChecked()))

        # Меню
        tray_menu = QMenu()
        tray_menu.addAction(kern_update)
        tray_menu.addAction(autoload)
        tray_menu.addSeparator()
        tray_menu.addAction(show_old_message)
        tray_menu.addAction(quit_action)

        # Установка позиций
        autoload.setChecked(self.settings.value('autoload', type=bool))
        kern_update.setChecked(self.settings.value('kern', type=bool))

        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.setVisible(self.show)

        self.check_kernel(check=kern_update.isChecked())


    def set_autoload(self, auto=None):
        """вкл\выкл автозагрузка"""
        dir_home = Path.home()
        dir_autostart = f'{dir_home}/.config/autostart'
        file_indicator = '/opt/kernel-manager/autostart-kernel-indicator.desktop'

        if Path(dir_autostart).exists() is False:
            Path(dir_autostart).mkdir(parents=False)

        try:
            if auto:
                copy(file_indicator, f'{dir_autostart}/autostart-kernel-indicator.desktop')
                self.tray_icon.showMessage(
                    _('Autostart directory:'),
                    dir_autostart, QSystemTrayIcon.Information, 10000)
            else:
                os.remove(f'{dir_autostart}/autostart-kernel-indicator.desktop')
        except(FileNotFoundError, FileExistsError):
            pass

        self.settings.setValue('autoload', auto)


    def check_kernel(self, click=None, check=None):
        """Обработка сигнала с триггера kern"""
        if click is not None:
            self.settings.setValue('kern', click)

        if click or check:
            if self.show:
                self.delay = 0

            sleep(self.delay)
            self.version_kernel()


    def version_kernel(self):
        """Проверка версии ядра"""
        flavour = re.search(r'.*-(.+-.+)-', release()).group(1)
        current = release().split('-')[0]
        new = current.split('.')
        #act = re.compile(r':(.+)-alt')

        search_version = shrun(f"apt-cache pkgnames kernel-image-{flavour}#")

        for line in search_version.splitlines():
            act = re.search(r':(.+)-alt' ,line).group(1).split(".")

            if int(act[0]) > int(new[0]): new[0] = act[0]
            if int(act[1]) > int(new[1]): new[1] = act[1]
            if int(act[2]) > int(new[2]): new[2] = act[2]

        new = ".".join(new)
        self.settings.setValue('new', new)

        if current == new and self.show is False:
            exit()
        elif current == new and self.show is True:
            pass
        else:
            self.tray_icon.setVisible(True)
            self.show_message()


    def show_message(self):
        """Показать сообщения в трее"""
        new = self.settings.value('new', type=str)
        header = _("Kernel update")
        body = _("A new version of the kernel is available: ") + new

        if new != '':
            self.tray_icon.showMessage(
                header,body, QSystemTrayIcon.Information, 10000)


    def open_kernel_manager(self):
        """Открыть kernel manager"""
        activ_manager = shrun("pgrep -o kernel-manager")

        if activ_manager: pass
        else: Popen("kernel-manager")


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    sys_tray = SystemTrayWindows()
    sys.exit(app.exec_())
